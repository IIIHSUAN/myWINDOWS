#pragma once

#include "App/App.h"

#include <ctime>

class Desktop;

class DesktopWindow :public Window
{
public:
	friend Desktop;
	DesktopWindow(std::wstring _name, Pos _pos, Size _size);


private:
	std::shared_ptr<Button>bDesktop, bSettings, bPainter, bChess, bTrans, b0, b1, b2, b3, b4;
	std::shared_ptr<Image> iDoge, iBible, iJenny, iXi, iWazzup, iHan;
	std::shared_ptr<Label> lTime;

	void animTime();
	void animSettings();
	void animDoge();
	void animJenny();
	void animHan();
	void animWazzup();

	const wchar_t* dogeRaw = L"\
        ▄▀▄             ▄   \
        ▌▒█           ▄▀▒▌  \
        ▌▒▒█        ▄▀▒▒▒▐  \
       ▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐  \
     ▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐  \
   ▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▒▌ \
  ▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌ \
  ▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐ \
 ▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌\
 ▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌\
▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒▌";

	const wchar_t* biblethumpRaw = L"\
⣿⣿⣿⣿⣿⣿⣿⡿⠿⠟⠛⠃⠃⢂⢀⣀⣀⢀⠐⠑⠙⠙⠟⠿⡿⣿⣿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⡿⠉⠈⠄⡀⣐⢔⡲⡲⣓⢮⡪⡺⣜⢦⢢⡂⡀⠄⠉⠉⢿⣿⣿⣿⣿⣿\
⣿⣿⣿⡟⠋⠄⠠⣔⡲⡪⡮⡳⣹⢹⢜⢮⡪⡫⣎⢮⢳⡹⣒⢦⢤⠄⠈⠙⢻⢿⣿⣿\
⣿⣿⠇⠄⠄⢠⢯⡲⡝⡮⡎⡯⣪⢳⡹⡜⣎⢯⡪⡮⡳⡹⣜⢵⡹⣹⡀⠄⠄⢚⣿⣿\
⣿⠝⠄⢀⢸⣪⡺⡜⡮⡺⣪⢳⢕⢗⢵⢝⢮⢺⢜⢎⡗⡽⣸⢪⡺⡜⡮⡢⡀⠄⠏⣿\
⢿⠄⢀⢸⢜⡖⠕⠩⠊⠍⢎⢧⡫⡮⡳⡕⣗⢝⡎⣗⢝⠮⠎⠧⠳⠹⣪⢳⡂⡀⠄⡿\
⠱⠄⠐⣜⡕⠠⣿⣿⠙⠄⠄⢪⡺⡊⠊⠊⠊⠊⡺⡪⡇⠇⡄⣧⡐⠄⠄⢣⢇⠂⠄⠣\
⡠⠄⠸⣰⡣⣃⠄⠄⢀⠄⣰⡪⡊⢀⣀⣀⣀⣀⠈⠸⣕⡅⠄⠄⠄⠄⢐⢸⡪⡂⠄⢌\
⣪⠄⠨⢰⢝⢮⣞⡮⣖⣗⢗⡇⡂⣀⠡⡁⡌⣈⢁⢨⣒⢗⣖⣆⣖⣔⣲⡕⡇⠁⠄⡧\
⣿⢤⠄⠄⢹⢱⣗⡯⣟⢮⡳⣹⢹⢜⡝⡞⡮⣎⢯⢺⢜⡺⣺⡺⣺⢾⢕⠇⠂⠄⡤⣿\
⣿⣿⣄⡀⠄⠘⠾⢽⣳⢳⡹⣜⢕⢗⡝⡮⡺⡜⣎⢗⢵⢝⢮⣞⢽⠯⠃⠄⢀⣠⣿⣿\
⣿⣿⣷⣗⣆⣀⠄⠁⠍⠇⠯⢪⠳⠳⠵⢝⠮⡺⡪⠳⠳⡹⠱⠉⠁⠄⣠⣰⣾⣾⣿⣿\
⣿⣿⣿⣿⣿⣷⣶⣦⣤⢄⠈⠄⠁⠉⠈⠈⠈⠈⠈⠈⠈⠠⢤⣤⣦⣶⣿⣿⣿⣿⣿⣿\
";

	const wchar_t* bloodTrailRaw = L"\
                 ░░░░▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒░░░                   \
       ░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░               \
     ▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
    ░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
     ▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████▓▓▓▓▓▓▓█▓               \
     ▒▓▓▓▓▓▓▓▓██▓██████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▓███████▓▓▓▓▓█▓░   ░▒▒░       \
     ▒▓▓▓▓▓▓███▓▓███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███▓▓█████████▓▓▓▓█▓░░░▒▓▓▓▓▒▒     \
     ░▓▓▓▓▓▓█████████████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██████████████▓▓▓▓█▓░░▒▓▓▓▓▓▓▒░    \
     ░▒▓▓▓▓▓████▓▓▓▓▓▓▓▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████████████▓▓▓▓▓█▓▒▓▓▓▓▓▓▓▓▓▓▓▓▒ \
     ░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒\
     ▒▓▓▓▓▓▓▓▓████▓▓▓▓▓▓▓▓▓▓█████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▓▓▓▓▓▒\
   ░▒▓▓▓▓▓▓▓▓▓████▓▒▒▒░░░░░▒▓▓█▓▓▒░░░░░░░▒▒▒▒▒▒▒▒▒▓▓▓█████▓▓▓▓▓▓▓▓▓▓▓▓▓█▓▓▓▓▓▓▓▓\
  ░▒▓▓▓▓▓▓▓▓▓▓▓██▓▓▒▒▒░    ░▒███▒░           ░░░▒▒▓▓▓████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒\
 ░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░░░                   ░░░░▒▒▓▓▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒░\
▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒  \
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒░        \
▓▓▓▓▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███▓▒░             \
░▒▓▓▓████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▓               \
  ░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
    ░░▒▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
       ░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
       ░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓████▓▒▒▒▒▒▒▒▒▒▒▒▒▓▓██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
       ░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓░          ░▒▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒               \
       ░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓█████▓▒           ░▒▓█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██▓▓▒               \
         ░▒▒▒▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒░              ▒▒▓▓██████████▓▓▓▓▒▒░                \
";  // (85, 25)

	const wchar_t* jennyTurtleRaw = L"\
                 ▄▄▀▀▀▀▀▀▀▀▄▄      \
               ▄▀░░░░░░░░░░░░▀▄    \
              ▄▀░░░▄▄▄░░░░░░░▄█▄   \
              █░░░███░█░░░░░░█▄█   \
            ▄▄█░░░▀███▀░░░░░░▀▀▀▄  \
         ▄▓█░░█▄▀▀▄░░░░░░░░░░░░▄▀▀▄\
        █▓▓▀░░█░░░░█░░▀▀▄▄▄▀▀░▄▀░░█\
       █▓▓▀░░█░░░░░░█▄▄▄▄▄▄▄▀█░░░░█\
      ▄█▓█░░█░░░░░▄▀░░░░░░░░░█░░░█ \
  ▄▀▀▀█▓▓▓▓▄░▀▄░░░█░▄▄▄▄█▄▄▄▄▀░▄▀  \
 █░░░░█▓▓▓▓█░░█▀▀▀▄▄░░░░█░░░░█▀    \
█░░░░░░█▓▓▀░░█▀▀▄░░░▀▀▀▀█▀▀░▄▀▄    \
█░░░▄▄░░█░░▄▀░░░░▀▄░░░░█░░▄▀░░█    \
 █░▀░░▀▄░▀▀█░░░░░░█▄▄▄▄█▀▀░░░░█    \
  ▀▄▄▄▄▄▀▀▀▀▄▄▄▄▄▄▀    ▀▄▄▄▄▄▄▀    \
";

	const wchar_t* xiRaw = L"\
⣿⣿⣿⣿⣿⠟⠋⠄⠄⠄⠄⠄⠄⠄⢁⠈⢻⢿⣿⣿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⠃⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠈⡀⠭⢿⣿⣿⣿⣿\
⣿⣿⣿⣿⡟⠄⢀⣾⣿⣿⣿⣷⣶⣿⣷⣶⣶⡆⠄⠄⠄⣿⣿⣿⣿\
⣿⣿⣿⣿⡇⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠄⠄⢸⣿⣿⣿⣿\
⣿⣿⣿⣿⣇⣼⣿⣿⠿⠶⠙⣿⡟⠡⣴⣿⣽⣿⣧⠄⢸⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⣾⣿⣿⣟⣭⣾⣿⣷⣶⣶⣴⣶⣿⣿⢄⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⣿⣿⣿⡟⣩⣿⣿⣿⡏⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⣿⣹⡋⠘⠷⣦⣀⣠⡶⠁⠈⠁⠄⣿⣿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⣿⣍⠃⣴⣶⡔⠒⠄⣠⢀⠄⠄⠄⡨⣿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⣿⣿⣦⡘⠿⣷⣿⠿⠟⠃⠄⠄⣠⡇⠈⠻⣿⣿⣿⣿\
⣿⣿⣿⣿⡿⠟⠋⢁⣷⣠⠄⠄⠄⠄⣀⣠⣾⡟⠄⠄⠄⠄⠉⠙⠻\
⡿⠟⠋⠁⠄⠄⠄⢸⣿⣿⡯⢓⣴⣾⣿⣿⡟⠄⠄⠄⠄⠄⠄⠄⠄\
⠄⠄⠄⠄⠄⠄⠄⣿⡟⣷⠄⠹⣿⣿⣿⡿⠁⠄⠄⠄⠄⠄⠄⠄⠄\
";  // (26, 13)

	const wchar_t* hanRaw = L"\
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⣿⣿⠟⣫⣗⠽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⡛⢿⣿⣿⣿⣿⣿\
⣿⣿⣿⣿⠟⣡⣾⣻⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡙⢿⣿⣿⣿\
⣿⣿⣿⠃⣴⣿⣿⣯⠖⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣎⢿⣿⣿\
⣿⣿⡏⢀⣻⣿⣿⣠⣨⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⠿⣿⣿⣿⡟⣿⣿\
⣿⣿⠇⢸⣾⣿⢿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⢿⣿⣿⡇⣿⣿\
⣿⣿⠄⣨⣿⣿⠋⣀⣀⡀⠈⢹⣿⣿⣿⣿⣻⡍⠉⠉⠉⠉⢿⣿⣿⡇⣿⣿\
⣿⠿⠆⢻⣿⣿⣿⣿⣿⠿⢾⣶⡍⢍⣿⣿⡿⠿⠟⠿⢿⣿⠿⢿⣿⡇⠿⣿\
⡟⢀⢂⣸⣟⠄⢉⣠⣤⣤⣤⣽⣇⢠⣿⣿⣗⣵⡤⠴⣶⣦⣁⣠⣿⣀⡂⣹\
⣧⠈⠈⢿⣿⣿⣿⣿⣿⣿⣿⠟⠁⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡯⣧⢸\
⣿⠠⡀⣹⣿⣦⣻⣿⣿⣿⡷⣡⣤⣾⣿⣿⣿⣏⠻⡿⣿⣿⣿⣿⣿⣇⠈⣼\
⣿⣧⡀⢸⡏⢿⣿⣿⣿⡟⠄⠊⠉⠉⣛⣭⣍⣹⣷⣴⣿⣿⡻⡟⣿⣹⣧⣿\
⣿⣿⣷⣌⡏⠄⢰⣿⠿⠿⣿⣿⠿⣿⣿⠿⢿⣿⣿⣿⣿⣿⣿⣧⢽⣷⣿⣿\
⣿⣿⣿⣿⠑⠄⠹⣿⣯⣅⠄⠄⠄⣁⣩⣬⠅⣠⣦⣤⣿⣿⣿⢻⣾⣿⣿⣿\
⣿⣿⣿⣿⢿⣬⣲⡟⢿⣿⣷⣿⣧⣬⣤⣥⣽⣿⣿⣿⣿⡟⠄⢸⣿⣿⣿⣿\
⣿⣿⣿⠏⠈⢿⠻⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⢁⣴⣿⣿⣿⣿⣿\
⣿⡿⠏⠄⠄⠄⠸⣬⠻⡉⡃⠊⠋⠙⠋⠛⠋⠉⣱⣶⣾⣿⣿⣿⣿⣿⣿⣿\
";  // (29, 17)

	const wchar_t* shibaRaw = L"\
                                          ▄▄                              \
                  ▄▄▄▄▄▄▄▄▄▄▄▄▄▄    ▄▄▄█▀▀█▌                              \
             ▄██▀▀              ▀███▀     █                               \
          ▄█▀                      ▀█    █▌                               \
 ██▀██▄▄▄██▄▄                        ▄ ▄█▀                            ▄▄██\
  ▀█  ▄▄▄▄▄▄                     ▄▄▄▄ ██                         ▄▄██▀    \
    ██▄ ▀▀         ▄█▀▀▀▀▀▀█▄   █▀   █ █           ▄▄▄▄▄▄▄▄▄▄█▀▀▀▀        \
    █ ▀▀           ▄▄▄▄▄▄    █▌▐█ ▄█   █▌   ▄▄█▀▀▀▀▀                      \
   █▀  ▄        ▄█  █████▀█▄  ▀█▌▀▀▀   █▌ ▐█▄▄▄▄▄▄▄██▀▀██▀▀▀▀▀██▐█▄       \
  ▐▌  █▀      ▄█▀      ▀▀▀▀▀      ▄    █▌           ▄█▀▀  ▄▄█▀█   ██▄     \
 ▐█  ▐█    ▄▄█▀                    █▄  █           ▐█   ██▐█▄▄█  ▐█ █▌    \
 █▌  █    ▐█                         ▀██            █▄   █    █▄▄▄█▀    ▄█\
 █   █▄   ▐█                      ██▄  ▀█▄           ▀█ ▄███▀▀▀▀      ▄█▀ \
 █    █▄   ▀██         ▄▄▄        ▄█████▄█▌             █      ▄▄██▀▀▀    \
▐█     ▀█▄     ▀▀▀█▄▄    ▀▀█▄▄    ████████▌             ▀█▀▀▀▀▀▀          \
▐▌       ▀▀█▄▄▄      ▀▀█▄▄▀▀███▄▄  ▀▀▀███▀                                \
▐▌            ▀▀▀▀▀███▄▄  ▀▀▀██▄█▀▀▀█▌                                    \
▐▌                              ▀   ▐█                                    \
▐▌                                  ▐█                                    \
▐▌                                   █                                    \
                                    ▄█                                    \
";  // (75, 21)

	const wchar_t* wazzupRaw = L"\
▓▓      ▓▓   ▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓  ▓▓    ▓▓  ▓▓▓▓▓▓▓     ▓▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓  ▓▓  ▓▓▓▓▓▓▓▓  ▓▓  ▓▓    ▓▓   ▓▓▓▓▓▓▓\
▓▓  ▓▓  ▓▓  ▓▓    ▓▓       ▓▓        ▓▓   ▓▓    ▓▓  ▓▓    ▓▓    ▓▓    ▓▓  ▓▓        ▓▓        ▓▓  ▓▓  ▓▓▓▓  ▓▓  ▓▓      \
▓▓  ▓▓  ▓▓  ▓▓▓▓▓▓▓▓     ▓▓        ▓▓     ▓▓    ▓▓  ▓▓▓▓▓▓▓     ▓▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓  ▓▓        ▓▓  ▓▓  ▓▓ ▓▓ ▓▓  ▓▓  ▓▓▓▓\
▓▓  ▓▓  ▓▓  ▓▓    ▓▓   ▓▓        ▓▓       ▓▓    ▓▓  ▓▓          ▓▓    ▓▓  ▓▓        ▓▓  ▓▓    ▓▓  ▓▓  ▓▓  ▓▓▓▓  ▓▓    ▓▓\
 ▓▓▓▓▓▓▓▓   ▓▓    ▓▓  ▓▓▓▓▓▓▓▓  ▓▓▓▓▓▓▓▓   ▓▓▓▓▓▓   ▓▓          ▓▓▓▓▓▓▓   ▓▓▓▓▓▓▓▓  ▓▓   ▓▓▓▓▓▓   ▓▓  ▓▓    ▓▓   ▓▓▓▓▓▓ \
";  // (121, 5)
};

class Desktop :public App
{
public:
	Desktop(Pos pos = { 0,0 }, UINT id = 0) : App(AppCollection::Desktop, id) {
		push_window(desktopWindow, DesktopWindow(L"Browser Tab "+ std::to_wstring(getId()), pos, { MY_WINDOW_WIDTH - 2, MY_WINDOW_HEIGHT - 2 }));
		desktopWindow->setCloseCallback([this] {
			this->closeApp();
		});

		push_window(devToolWindow, DevToolWindow({ MY_WINDOW_WIDTH - 80 + pos.x, 2 + pos.y }, { 40, 30 }, false));
		auto& desktop = (DesktopWindow &)*desktopWindow;
		auto& s = desktop.bSettings;
		auto& t = desktop.lTime;
		
		devTool_push(devToolWindow, System::get().getFps());

		devTool_push(devToolWindow, POLLING_MAP(A));
		devTool_push(devToolWindow, POLLING_MAP(S));
		devTool_push(devToolWindow, POLLING_MAP(D));
		devTool_push(devToolWindow, POLLING_MAP(W));
		devTool_push(devToolWindow, POLLING_MAP(spacebar));
		devTool_push(devToolWindow, POLLING_MAP(shift));
		devTool_push(devToolWindow, POLLING_MAP(ctrl));
		devTool_push(devToolWindow, POLLING_MAP(mouse_l1));
		devTool_push(devToolWindow, POLLING_MAP(mouse_l2));
		devTool_push(devToolWindow, POLLING_MAP(mouse_l3));
		devTool_push(devToolWindow, POLLING_MAP(mouse_l4));
		devTool_push(devToolWindow, POLLING_MAP(mouse_r1));

		//devTool_push(devToolWindow, s->getZindex());
		//devTool_push(devToolWindow, t->getZindex());
	}

private:
	std::shared_ptr<Window> desktopWindow, devToolWindow;
};